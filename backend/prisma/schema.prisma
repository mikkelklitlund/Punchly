generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Company {
  id            Int                 @id @default(autoincrement())
  name          String
  address       String
  employees     Employee[]
  departments   Department[]
  employeeTypes EmployeeType[]
  absenceTypes  AbsenceType[]
  users         UserCompanyAccess[]

  @@unique(name: "addressName", [name, address])
}

model User {
  id        Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  username  String    @unique
  deletedAt DateTime? @db.Timestamptz(3)

  companies    UserCompanyAccess[]
  RefreshToken RefreshToken[]

  @@index([email])
  @@index([username])
  @@index([deletedAt])
}

model RefreshToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  expiryDate DateTime @db.Timestamptz(3)
  createdAt  DateTime @default(now()) @db.Timestamptz(3)
  revoked    Boolean  @default(false)

  @@index([userId])
  @@index([expiryDate])
  @@index([revoked])
}

model UserCompanyAccess {
  userId    Int
  companyId Int
  role      Role
  user      User    @relation(fields: [userId], references: [id])
  company   Company @relation(fields: [companyId], references: [id])

  @@id([userId, companyId])
}

model Department {
  id        Int        @id @default(autoincrement())
  name      String
  companyId Int
  company   Company    @relation(fields: [companyId], references: [id])
  employees Employee[]

  @@unique(name: "departmentCompany", [name, companyId])
}

model Employee {
  id                 Int                @id @default(autoincrement())
  name               String
  profilePicturePath String             @default("default-avatar.jpg")
  companyId          Int
  company            Company            @relation(fields: [companyId], references: [id])
  departmentId       Int
  department         Department         @relation(fields: [departmentId], references: [id])
  checkedIn          Boolean            @default(false)
  birthdate          DateTime           @db.Date
  employeeTypeId     Int
  employeeType       EmployeeType       @relation(fields: [employeeTypeId], references: [id])
  monthlySalary      Float?
  monthlyHours       Float?
  hourlySalary       Float?
  address            String
  city               String
  absenceRecords     AbsenceRecord[]
  attendanceRecords  AttendanceRecord[]
  deletedAt          DateTime?          @db.Timestamptz(3)

  @@index([companyId])
  @@index([departmentId])
}

model EmployeeType {
  id        Int        @id @default(autoincrement())
  name      String
  companyId Int
  company   Company    @relation(fields: [companyId], references: [id])
  employees Employee[]

  @@unique(name: "typeCompany", [name, companyId])
}

model AbsenceRecord {
  id          Int         @id @default(autoincrement())
  employeeId  Int
  employee    Employee    @relation(fields: [employeeId], references: [id])
  startDate    DateTime @db.Date
  endDate      DateTime @db.Date
  absenceTypeId  Int
  absenceType    AbsenceType  @relation(fields: [absenceTypeId], references: [id])

  @@index([employeeId])
  @@index([absenceTypeId])
  @@index([employeeId, startDate])
  @@index([employeeId, endDate])
}

model AttendanceRecord {
  id         Int       @id @default(autoincrement())
  employeeId Int
  employee   Employee  @relation(fields: [employeeId], references: [id])
  checkIn    DateTime  @default(now()) @db.Timestamptz(3)
  checkOut   DateTime? @db.Timestamptz(3)
  autoClosed Boolean   @default(false)

  @@index([employeeId])
}

model AbsenceType {
  id             Int              @id @default(autoincrement())
  name           String
  companyId      Int
  company        Company          @relation(fields: [companyId], references: [id], onDelete: Cascade)
  absenceRecords AbsenceRecord[]

  @@unique([name, companyId], name: "absenceTypeCompany")
  @@index([companyId])
}

enum Role {
  COMPANY
  MANAGER
  ADMIN
}
